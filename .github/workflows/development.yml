name: Development Workflow

on:
  push:
    branches: [ develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ develop, main, master ]

env:
  NODE_VERSION: '18'

jobs:
  # Run tests and linting for development
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint backend
        run: |
          cd server
          npm run lint || echo "No lint script configured"

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: Type check frontend
        run: |
          cd frontend
          npm run type-check || npx tsc --noEmit

      - name: Test backend
        run: |
          cd server
          npm test || echo "No tests configured"

      - name: Test frontend
        run: |
          cd frontend
          npm test || echo "No tests configured"

  # Deploy to staging (if develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_BACKEND_URL: ${{ secrets.STAGING_BACKEND_URL }}

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--target=preview'

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npx eslint . --ext .ts,.tsx --max-warnings 0

      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" frontend/src --include="*.ts" --include="*.tsx"; then
            echo "‚ùå Found console.log statements in production code"
            exit 1
          else
            echo "‚úÖ No console.log statements found"
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "üìù Found TODO/FIXME comments:"
          grep -r "TODO\|FIXME" frontend/src --include="*.ts" --include="*.tsx" || echo "No TODO/FIXME comments found"

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit backend dependencies
        run: |
          cd server
          npm audit --audit-level=high || echo "Audit found high severity issues"

      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=high || echo "Audit found high severity issues"

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build backend
        run: |
          cd server
          npm run build || echo "No build script configured"

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_BACKEND_URL: "http://localhost:3001"

      - name: Verify build artifacts
        run: |
          if [ -d "frontend/.next" ]; then
            echo "‚úÖ Frontend build successful"
            ls -la frontend/.next/
          else
            echo "‚ùå Frontend build failed"
            exit 1
          fi
